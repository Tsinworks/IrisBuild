%{
#include "vm/solution.h"
#include "vm/cproj.h"
#include "vm/csproj.h"
#include "vm/node.h"
#include "vm/function.h"
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif
#include "tokens.h"
#define YY_NO_UNPUT
#define YY_USER_ACTION \
    yylloc->first_line = yylloc->last_line; \
    yylloc->first_column = yylloc->last_column; \
    for(int i = 0; yytext[i] != '\0'; i++) { \
        if(yytext[i] == '\n') { \
            yylloc->last_line++; \
            yylloc->last_column = 0; \
        } \
        else { \
            yylloc->last_column++; \
        } \
    }
extern int yylex_init (yyscan_t* scanner);
%}

%option noyywrap
%option never-interactive
%option reentrant
%option bison-bridge
%option bison-locations
%option yylineno

DIGIT		    [0-9]
ID			    [_a-z][_a-z0-9\.]*
ID_GLOAL        \$\{{ID}\}
ID_SGLOAL       \$[_a-z][_a-z0-9]*

%%
{DIGIT}+        { yylval->number = atoi(yytext); return TOK_NUMBER; }
true            { yylval->boolean = true; return TOK_TRUE; }
false           { yylval->boolean = false; return TOK_FALSE; }
match           { return TOK_MATCH; }
if              { return TOK_IF; }
else            { return TOK_ELSE; }
elif            { return TOK_ELIF; }

solution        { return TOK_SOLUTION; }
import          { return TOK_IMPORT; }
config          { return TOK_CONFIG; }
impclib         { return TOK_IMPCLIB; }
cproj           { return TOK_CPROJ; }
csproj          { return TOK_CSPROJ; }
rustproj        { return TOK_RUSTPROJ; }
javaproj        { return TOK_JAVAPROJ; }
subproj         { return TOK_SUBPROJ; }

"("             { return TOK_LEFT_PAREN; }
")"             { return TOK_RIGHT_PAREN; }

"{"             { return TOK_LEFT_BRACE; }
"}"             { return TOK_RIGHT_BRACE; }

"["             { return TOK_LEFT_BRACKET; }
"]"             { return TOK_RIGHT_BRACKET; }

"="             { return TOK_ASSIGN; }
">"             { return TOK_LEFT_ANGLE; }

"+="             { return TOK_APPEND; }
"-="             { return TOK_REMOVE; }

","             { return TOK_COMMA; }
"|"             { return TOK_OR; }

{ID}|{ID_GLOAL}|{ID_SGLOAL} { 
                    yylval->str = strdup(yytext); 
                    return TOK_IDENTIFIER; 
                }
\"[^\"]*\"		{
	                yylval->str = strdup(yytext);
	                return TOK_LITERAL;
                }
[ \t]*
"\/\/"[^\n\r]*
\r\n						{yylineno++;}
\n\r						{yylineno++;}
\r							{yylineno++;}
\n							{yylineno++;}
%%
